/*--------------------------------------------------|| dTree 2.05 | www.destroydrop.com/javascript/tree/ ||---------------------------------------------------|| Copyright (c) 2002-2003 Geir Landrö               ||                                                   || This script can be used freely as long as all     || copyright messages are intact.                    ||                                                   || Updated: 17.04.2003                               ||--------------------------------------------------*//***********************************************************************************************************************//* Node object*/function Node(id, pid, name, url, title, target, icon, iconOpen, open) {	this.id = id; this.pid = pid; this.name = name;	this.url = url;	this.title = title;	this.target = target;	this.icon = icon;	this.iconOpen = iconOpen;	this._io = open || false;	this._is = false; this._ls = false;	this._hc = false;	this._ai = 0;	this._p;};/* Fim do Node(id, pid, name, url, title, target, icon, iconOpen, open)  *//***********************************************************************************************************************//***********************************************************************************************************************//*-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree*//* Tree object*/function dTree(objName) {	this.config = {		target					: null,		folderLinks			: true,		useSelection		: true,		useCookies			: true,		useLines				: true,		useIcons				: true,		useStatusText		: false,		closeSameLevel	: false,		inOrder					: false	}/*fim do this.config configuracao inicial da tree*/	this.icon = {		root				: 'img/base.gif',		folder			: 'img/folder.gif',		folderOpen	: 'img/folderopen.gif',		node				: 'img/page.gif',		empty				: 'img/empty.gif',		line				: 'img/line.gif',		join				: 'img/join.gif',		joinBottom	: 'img/joinbottom.gif',		plus				: 'img/plus.gif',		plusBottom	: 'img/plusbottom.gif',		minus				: 'img/minus.gif',		minusBottom	: 'img/minusbottom.gif',		nlPlus			: 'img/nolines_plus.gif',		nlMinus			: 'img/nolines_minus.gif'	};/*fim do this.icon - configuração dos ícones da tree*/	this.obj = objName;	this.aNodes = [];	this.aIndent = [];	this.root = new Node(-1);	this.selectedNode = null;	this.selectedFound = false;this.completed = false;this.nameIdImgEIcon="idDtreeImgEIcon"; this.nameAHrefFnctn_s="idDtreeAHrefFnctn_s";this.nameIdDivDoNo_d="idDtreeDivDoNo_d";this.nameIdj_ident="idDtreej_ident";};/*fim do dTree(objName)*//***********************************************************************************************************************//* Adds a new node to the node array Adicona um novo no ao array de nos Esse é um método da "classe" dTree*/dTree.prototype.add = function(id, pid, name, url, title, target, icon, iconOpen, open) {	this.aNodes[this.aNodes.length] = new Node(id, pid, name, url, title, target, icon, iconOpen, open);};/*fim do dTree.prototype.add *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//*Open all nodes abre  todos os nós*/dTree.prototype.openAll = function() {	this.oAll(true);};/*fim do dTree.prototype.openAll = function()*//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//*close all nodes  fecha todos os nós*/dTree.prototype.closeAll = function() {	this.oAll(false);};/*fim do dTree.prototype.closeAll = function()*//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Outputs the tree to the page  string para printar no html a tree*/dTree.prototype.toString = function() {	var str = '<div class="dtree">\n';/*colocará tudo em uma div com classe dtree*/	                if (document.getElementById) {		                    if (this.config.useCookies) 		                        this.selectedNode = this.getSelected();		                str += this.addNode(this.root);	                } else 	                    str += 'Navegador não suportado!';	        str += '</div>';	        if (!this.selectedFound) 	            this.selectedNode = null;	    this.completed = true;	    return str;};/*fim do dTree.prototype.toString = function() *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Creates the tree structure  - Cria a estrutura da tree*/dTree.prototype.addNode = function(pNode) {	var str = '';	var n=0;	        if (this.config.inOrder) 	            n = pNode._ai;/*n deve ser   a posicao do array de nos selecionado */	                for (n; n<this.aNodes.length; n++) {		                    if (this.aNodes[n].pid == pNode.id) {/*percorre ate achar o id do no solicitado*/			                    var cn = this.aNodes[n];			                        cn._p = pNode;			                        cn._ai = n;			                        this.setCS(cn);/*Verifica se um nó tem filhos e se ele é o último irmão*/			                            if (!cn.target && this.config.target) 			                                cn.target = this.config.target;			                            if (cn._hc && !cn._io && this.config.useCookies) 			                                cn._io = this.isOpen(cn.id);/*verifica se o ID do nó está no cookie*/			                            if (!this.config.folderLinks && cn._hc) 			                                cn.url = null;			                            if (this.config.useSelection && cn.id == this.selectedNode && !this.selectedFound) {					                            cn._is = true;					                            this.selectedNode = n;/*no selecionado n*/					                            this.selectedFound = true;			                            }			                        str += this.node(cn, n);			                        if (cn._ls) break;		                    }	                }	    return str;};/*Fim do método addNode  *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Creates the node icon, url and textCria o ícone do nó, url e texto*/dTree.prototype.node = function(node, nodeId) {                var dt = new Date().getTime();	var str = '<div class="dTreeNode'+'">' + this.indent(node, nodeId);	        if (this.config.useIcons) {		            if (!node.icon) 		                node.icon = (this.root.id == node.pid) ? this.icon.root : ((node._hc) ? this.icon.folder : this.icon.node);		            if (!node.iconOpen) 		                node.iconOpen = (node._hc) ? this.icon.folderOpen : this.icon.node;		            if (this.root.id == node.pid) {			            node.icon = this.icon.root;			            node.iconOpen = this.icon.root;		            }		        str +='<img id="'+this.nameIdImgEIcon + this.obj+nodeId+'" src="'+((node._io) ? node.iconOpen : node.icon) + '" alt="" />';		        /*verificando*/	        }	        if (node.url) {		        str += '<a id="'+this.nameAHrefFnctn_s + this.obj + nodeId + '" class="' + ((this.config.useSelection) ? ((node._is ? 'nodeSel' : 'node')) : 'node') + '" href="' + node.url + '"';		        if (node.title)		             str += ' title="' + node.title + '"';		        if (node.target) 		            str += ' target="' + node.target + '"';		        if (this.config.useStatusText)		             str += ' onmouseover="window.status=\'' + node.name + '\';return true;" onmouseout="window.status=\'\';return true;" ';		        if (this.config.useSelection && ((node._hc && this.config.folderLinks) || !node._hc))			        str += ' onclick="javascript: ' + this.obj + '.s(' + nodeId + ');"';		        str += '>';	        }	        else 	            if ((!this.config.folderLinks || !node.url) && node._hc && node.pid != this.root.id)		            str += '<a href="javascript: ' + this.obj + '.o(' + nodeId + ');" class="node">';	   str += node.name;	            if (node.url || ((!this.config.folderLinks || !node.url) && node._hc)) 	                str += '</a>';	        str += '</div>';	            if (node._hc) {		            str += '<div id="'+this.nameIdDivDoNo_d + this.obj + nodeId + '" class="clip" style="display:' + ((this.root.id == node.pid || node._io) ? 'block' : 'none') + ';">';		            str += this.addNode(node);		            str += '</div>';	            }	        this.aIndent.pop();	    return str;};/*Fim do método node  *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Adds the empty and line iconsAdiciona os ícones vazios e linha*/dTree.prototype.indent = function(node, nodeId) {	var str = '';	            if (this.root.id != node.pid) {		                for (var n=0; n<this.aIndent.length; n++)			                str += '<img src="' + ( (this.aIndent[n] == 1 && this.config.useLines) ? this.icon.line : this.icon.empty ) + '" alt="" />';/* fim do for (var n=0; n<this.aIndent.length; n++)  aIndent e o array com os nos que nao terao icones definidos */		            (node._ls) ? this.aIndent.push(0) : this.aIndent.push(1);		                        if (node._hc) {			                        str += '<a href="javascript: ' + this.obj + '.o(' + nodeId + ');"><img id="'+this.nameIdj_ident + this.obj + nodeId + '" src="';			                        if (!this.config.useLines) /*Se e para ter linhas*/			                            str += (node._io) ? this.icon.nlMinus : this.icon.nlPlus;			                        else 			                            str += ( (node._io) ? ((node._ls && this.config.useLines) ? this.icon.minusBottom : this.icon.minus) : ((node._ls && this.config.useLines) ? this.icon.plusBottom : this.icon.plus ) );			                        str += '" alt="" /></a>';		                        } else str += '<img src="' + ( (this.config.useLines) ? ((node._ls) ? this.icon.joinBottom : this.icon.join ) : this.icon.empty) + '" alt="" />';	                             }	    return str;};/*Fim do método indent  *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Checks if a node has any children and if it is the last sibling - Verifica se um nó tem filhos e se ele é o último irmão */dTree.prototype.setCS = function(node) {	var lastId;	        for (var n=0; n<this.aNodes.length; n++) {/*percorre todos os nos*/		            if (this.aNodes[n].pid == node.id) 		                node._hc = true;/*O no possui filhos have children-hc*/		            if (this.aNodes[n].pid == node.pid) 		                lastId = this.aNodes[n].id;	        }	    if (lastId==node.id) 	        node._ls = true;/* o no e o ultimo irmao last sibling - ls*/};/*Fim do método setCS *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Returns the selected noderetorna o nó selecionado*/dTree.prototype.getSelected = function() {	var sn = this.getCookie('cs' + this.obj);	    return (sn) ? sn : null;};/*Fim do método getSelected *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Highlights the selected nodeDestaca o nó selecionado*/dTree.prototype.s = function(id) {	    if (!this.config.useSelection) 	        return;	var cn = this.aNodes[id];	        if (cn._hc && !this.config.folderLinks) 	            return;	        if (this.selectedNode != id) {		            if (this.selectedNode || this.selectedNode==0) {			            eOld = document.getElementById(this.nameAHrefFnctn_s + this.obj + this.selectedNode);			            eOld.className = "node";		            }		        eNew = document.getElementById(this.nameAHrefFnctn_s + this.obj + id);		        eNew.className = "nodeSel";		        this.selectedNode = id;		            if (this.config.useCookies) 		                this.setCookie('cs' + this.obj, cn.id);	}};/*Fim do método s *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//*Toggle Open or closeAlterna entre abrir e fechar*/dTree.prototype.o = function(id) {	var cn = this.aNodes[id];	    this.nodeStatus(!cn._io, id, cn._ls);	    cn._io = !cn._io;	         if (this.config.closeSameLevel) 	            this.closeLevel(cn);/*fecha todos os filhos*/	        if (this.config.useCookies) 	            this.updateCookie();};/*Fim do método o *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Open or close all nodes  abre ou fecha todos os nós  simplesmente muda o status de Node._io e posteriormente manda escrever  o html*/dTree.prototype.oAll = function(status) {	        for (var n=0; n<this.aNodes.length; n++) {		            if (this.aNodes[n]._hc && this.aNodes[n].pid != this.root.id) {			            this.nodeStatus(status, n, this.aNodes[n]._ls)			            this.aNodes[n]._io = status;		            }	        }	    if (this.config.useCookies) 	        this.updateCookie();};/*Fim do método oAll *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Opens the tree to a specific nodeAbre um nó específico da árvoreabre recursivamente os filhos do nónão entendi bem como funciona*/dTree.prototype.openTo = function(nId, bSelect, bFirst) {	            if (!bFirst) {/*na primeira execução procura a posição do array de nos pertencente ao no nId*/		            for (var n=0; n<this.aNodes.length; n++) {			            if (this.aNodes[n].id == nId) {				            nId=n;				            break;			            }		            }	            }	    var cn=this.aNodes[nId];	            if (cn.pid==this.root.id || !cn._p)	                 return;/* para de abrir quando chegar no pai ou quando nao existir mais _p aNodes._p não da pra saber*/	        cn._io = true;	        cn._is = bSelect;	            if (this.completed && cn._hc) 	                this.nodeStatus(true, cn._ai, cn._ls);	            if (this.completed && bSelect) 	                this.s(cn._ai);	            else 	                    if (bSelect) 	                        this._sn=cn._ai;	    this.openTo(cn._p._ai, false, true);};/*Fim do método openTo *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Closes all nodes on the same level as certain node    Fecha-se todos os nós no mesmo nível como determinado nó*/dTree.prototype.closeLevel = function(node) {	for (var n=0; n<this.aNodes.length; n++) {		        if (this.aNodes[n].pid == node.pid && this.aNodes[n].id != node.id && this.aNodes[n]._hc) {			        this.nodeStatus(false, n, this.aNodes[n]._ls);			        this.aNodes[n]._io = false;			        this.closeAllChildren(this.aNodes[n]);		        }	}}/*Fim do método closeLevel *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//*Closes all children of a node  fecha todos os filhos do nó  fecha recursivamente*/dTree.prototype.closeAllChildren = function(node) {	for (var n=0; n<this.aNodes.length; n++) {		    if (this.aNodes[n].pid == node.id && this.aNodes[n]._hc) {			            if (this.aNodes[n]._io) 			                this.nodeStatus(false, n, this.aNodes[n]._ls);	                this.aNodes[n]._io = false;			        this.closeAllChildren(this.aNodes[n]);		    }	}}/*Fim do método closeAllChildren *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* Change the status of a node(open or closed)Alterar o status de um nó (aberto ou fechado)aqui que efetivamente fecha ou abre o nó*/dTree.prototype.nodeStatus = function(status, id, bottom) {	eDiv	= document.getElementById(this.nameIdDivDoNo_d + this.obj + id);/*div do no*/	eJoin	= document.getElementById(this.nameIdj_ident + this.obj + id);/*div com as figutas antes do ícone*/	    if (this.config.useIcons) {		    eIcon=document.getElementById(this.nameIdImgEIcon + this.obj + id);		    eIcon.src=(status) ? this.aNodes[id].iconOpen : this.aNodes[id].icon;	    }	eJoin.src = (this.config.useLines)?	((status)?((bottom)?this.icon.minusBottom:this.icon.minus):((bottom)?this.icon.plusBottom:this.icon.plus)):	((status)?this.icon.nlMinus:this.icon.nlPlus);	eDiv.style.display = (status) ? 'block': 'none';};/*Fim do método nodeStatus *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* [Cookie] Clears a cookieLimpa o cookie , os cookies são cs+"nome da instancia do objeto" co +""nome da instancia do objeto" */dTree.prototype.clearCookie = function() {	var now = new Date();	var yesterday = new Date(now.getTime() - 1000 * 60 * 60 * 24);/*ontem*/	    this.setCookie('co'+this.obj, 'cookieValue', yesterday);	    this.setCookie('cs'+this.obj, 'cookieValue', yesterday);};/*Fim do método clearCookie *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* [Cookie] Sets value in a cookieDefine o valor do cookie*/dTree.prototype.setCookie = function(cookieName, cookieValue, expires, path, domain, secure) {	document.cookie =		escape(cookieName) + '=' + escape(cookieValue)+ (expires ? '; expires=' + expires.toGMTString() : '')	+ (path ? '; path=' + path : '')+ (domain ? '; domain=' + domain : '')+ (secure ? '; secure' : '');};/*Fim do método setCookie *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* [Cookie] Gets a value from a cookie    Obtém o valor do cookie*/dTree.prototype.getCookie = function(cookieName) {	var cookieValue = '';	var posName = document.cookie.indexOf(escape(cookieName) + '=');	    if (posName != -1) {		    var posValue = posName + (escape(cookieName) + '=').length;		    var endPos = document.cookie.indexOf(';', posValue);		        if (endPos != -1) 		            cookieValue = unescape(document.cookie.substring(posValue, endPos));		        else 		            cookieValue = unescape(document.cookie.substring(posValue));	    }	    return (cookieValue);};/*Fim do método getCookie *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//* [Cookie] Returns ids of open nodes as a string   retoratualiza a string dos nos abertos no cookie  */dTree.prototype.updateCookie = function() {	var str = '';	    for (var n=0; n<this.aNodes.length; n++) {		        if (this.aNodes[n]._io && this.aNodes[n].pid != this.root.id) {			            if (str) str += '.';			                str += this.aNodes[n].id;		        }	    }	    this.setCookie('co' + this.obj, str);};/*Fim do método updateCookie *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//*[Cookie] Checks if a node id is in a cookieverifica se o ID do nó está no cookie*/dTree.prototype.isOpen = function(id) {	var aOpen = this.getCookie('co' + this.obj).split('.');	    for (var n=0; n<aOpen.length; n++)		        if (aOpen[n] == id) 		            return true;	return false;};/*Fim do método isOpen *//*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*-method-*+*//*-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree-+=-dtree*//*-------------------------------------------------------------------------------------------------*//* If Push and pop is not implemented by the browserSe o push e pop não forem suportados pelo navegador*/if (!Array.prototype.push) {	Array.prototype.push = function array_push() {		for(var i=0;i<arguments.length;i++)			this[this.length]=arguments[i];		return this.length;	}};/*Fim do if (!Array.prototype.push) *//*-------------------------------------------------------------------------------------------------*/if (!Array.prototype.pop) {	Array.prototype.pop = function array_pop() {		lastElement = this[this.length-1];		this.length = Math.max(this.length-1,0);		return lastElement;	}};/*Fim do if (!Array.prototype.pop) */